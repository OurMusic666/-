<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:web="http://www.springframework.org/schema/web"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
    	http://www.springframework.org/schema/mvc/spring-mvc.xsd
    	http://www.springframework.org/schema/aop
     	http://www.springframework.org/schema/aop/spring-aop.xsd
     	http://www.springframework.org/schema/web
     	http://www.springframework.org/schema/web/spring-web.xsd
     	http://www.springframework.org/schema/tx
     	http://www.springframework.org/schema/tx/spring-tx.xsd
    	">
    	
    <!-- spring包扫描 -->
 	<context:component-scan base-package="com.music.Team"></context:component-scan>
   
    <!-- 自动装配 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    
    <!-- 数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://127.0.0.1/music"/>
        <property name="username" value="root"/>
        <property name="password" value="a"/>
    </bean>
 	<!-- 创建mybatis的会话工厂    俩种加载配置方法  1：直接读取mybatis配置文件    （数据源，Mapper）
										 2，直接在bean中配置  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.music.Team.dao"></property>
	</bean>
    
 	<!-- spring 静态处理 -->
 	<mvc:default-servlet-handler/>
 	<!-- mvc 注解驱动 -->
	<mvc:annotation-driven/>
	
 	<!-- spring mvc 配置 -->
 	<!-- spring 视图配置 -->
 	<bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
	    <property name="prefix" value="/"/>
	    <property name="suffix" value=".jsp"/>
	</bean>

	<!-- spring 事务 advice（增强） 的管理者设置为transactionManager -->
	<!-- 事物管理器  similarly, don't forget the PlatformTransactionManager -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
	
	<!-- spring 事务切面配置 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            			<!-- 所有get开头的方法 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <!-- 其他所有方法			隔离级别		超时	“-1”不判断一直等待-->
            <tx:method name="*" isolation="DEFAULT" timeout="-1"/>
            <!--  需要在什么异常下回滚rollback-for=""	在什么情况下不需要回滚 no-rollback-for=""
            	回滚规则：默认情况下，挡方法抛出运行期异常（RuntimeException），则会触发事物回滚 -->
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
    	<aop:pointcut expression="execution(* com.music.Team.biz.*.*(..))" id="txA"/>
    	<aop:advisor advice-ref="txAdvice" pointcut="txA"/>
    </aop:config>
    
</beans>